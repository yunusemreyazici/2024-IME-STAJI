/// <reference types="jquery" />
/// <reference types="jquery.validation" />

import { DataGrid, DeleteResponse, EntityGrid, Exception, GroupInfo, PropertyGrid, PropertyGridOptions, PropertyItem, PropertyPanel, RetrieveRequest, RetrieveResponse, SaveRequest, SaveResponse, ServiceOptions, ServiceRequest, TemplatedDialog, ToolButton, UndeleteResponse, Widget } from '@serenity-is/corelib';
import { TranslationItem, TranslationListResponse } from '@serenity-is/extensions';
import { Column, Editor, EditorClass, EditorFactory, EditorOptions, EventEmitter, Grid, Group, GroupItemMetadataProvider, Position, ValidationResult } from '@serenity-is/sleekgrid';

export interface GridEditOptions<TItem = any> {
	grid: DataGrid<TItem, any>;
	autoSave?: boolean;
	bulkSaveHandler?: (reqs: SaveRequest<TItem>[]) => Promise<void>;
	editable?: (args: {
		column: Column<TItem>;
		item: TItem;
		row: number;
	}) => boolean;
	editorParams?: object | ((args: {
		column: Column<TItem>;
		item: TItem;
		slickArgs: EditorOptions;
	}) => any);
	editorType?: (args: {
		column: Column<TItem>;
		item: TItem;
		slickArgs: EditorOptions;
	}) => {
		new (...args: any[]): Widget;
	};
	editorInit?: ((args: {
		editor: Widget;
		column: Column<TItem>;
		item: TItem;
		slickArgs: EditorOptions;
	}) => void);
	afterCommitEdit?: ((args: {
		column: Column<TItem>;
		item: TItem;
		value: any;
		oldValue: any;
		row: number;
	}) => void);
	refreshAfterSave?: boolean;
	resetOnLoad?: boolean;
	saveHandler?: (req: SaveRequest<TItem>) => Promise<void>;
	saveServiceMethod?: string;
	showValidationError?: boolean;
	undoRowDblEsc?: boolean;
	validator?: (value: any, args: EditorOptions) => string;
}
export declare class GridEditController<TItem = any> implements EditorFactory {
	private _options;
	private dirtyStyles;
	constructor(opt: GridEditOptions<TItem>);
	updateModifiedClassesForRow(row: number): void;
	get options(): GridEditOptions<TItem>;
	getEditor(column: Column<any>, row: number): EditorClass;
	isDirty(): boolean;
	isItemDirty(item: any): boolean;
	isFieldDirty(item: any, field: string): boolean;
	undoRowChanges(row: number): void;
	undoChanges(): void;
	saveChanges(): void;
	static saveChangesButton(controller: () => GridEditController): ToolButton;
	static undoButton(controller: () => GridEditController): ToolButton;
}
declare module "@serenity-is/sleekgrid" {
	interface Column<TItem = any> {
		editableProperty?: PropertyItem;
	}
}
export declare class GridEditWrapper implements Editor {
	private args;
	private editor;
	private defaultValue;
	constructor(args: EditorOptions);
	focus(): void;
	isValueChanged(): boolean;
	keyCaptureList?: number[];
	loadValue(source: any): void;
	serializeValue(): any;
	applyValue(target: any, state: any): void;
	position?(pos: Position): void;
	preClick?(): void;
	hide?(): void;
	show?(): void;
	validate?(): ValidationResult;
	destroy(): void;
}
export interface AutoColumnWidthMixinOptions {
	grid: DataGrid<any, any>;
	/** Disable auto size on load behavior, default is false, user can stil auto size by double click */
	disabled?: boolean;
	/** True to just auto size once on load, not on every load, like after changing pages, sorting etc, default is false */
	autoSizeAllJustOnce?: boolean;
	/** Disable auto size on load behavior if user manually resizes a column, default is true */
	disableIfUserResize?: boolean;
	/** If column has an explicit width set in Form.cs, use that width on auto size, doesn't effect manually triggered auto size */
	useExplicitWidths?: () => boolean;
	/** Set to true if headers shouldn't affect auto width, default is false.
	 * If passed a number, header are considered for auto width but only up to that
	 * number, e.g. if you pass 200, and header width is 300, 200 will be used */
	ignoreHeaders?: boolean | number;
	/** Maximum rows to scan in data source, default is 40*/
	maxRows?: number;
	/** Maximum auto column width, default value is 400 */
	maxWidth?: number;
	/** Minimum auto column width, default value is 30 */
	minWidth?: number;
	/** Callback used before user auto size all columns */
	beforeUserAutoSizeAll?: () => void;
	/** Callback used after user auto size all columns */
	afterUserAutoSizeAll?: () => void;
	/** extra delta for input border and padding */
	inputDelta?: number;
}
/**
 * A mixin that can be applied to a DataGrid for auto size column width functionality
 */
export declare class AutoColumnWidthMixin extends Widget<AutoColumnWidthMixinOptions> {
	private slickGrid;
	private $container;
	private autoSizing;
	private inputDelta;
	private markupReadyOnce;
	private oldMarkupReady;
	private oldPersistSettings;
	private oldGetCurrentSettings;
	private oldRestoreSettingsFrom;
	disabled: boolean;
	private columnResizeHandler;
	constructor(options: AutoColumnWidthMixinOptions);
	destroy(): void;
	private resizeHandleClick;
	private createCellNodes;
	private calcMaxWidthFromCellNodes;
	private getAutoColumnWidth;
	private autoSizeColumn;
	private queueAutoSize;
	autoSizeAll(useExplicitWidths?: boolean): void;
	private getMaxCalcLength;
	private renderColumnCells;
	getPreSetWidth(columnDef: Column): number;
}
export type CardViewType = "card" | "grid";
export interface CardViewMixinOptions<TItem> {
	grid: DataGrid<TItem, any>;
	renderItem: (item: TItem, index: number) => HTMLElement | any;
	viewType?: CardViewType;
	cardClass?: string;
}
/**
 * A mixin that can be applied to a DataGrid for card view functionality
 */
export declare class CardViewMixin<TItem> {
	private options;
	private dataGrid;
	private cardContainer;
	constructor(options: CardViewMixinOptions<TItem>);
	switchView(viewType: CardViewType, persist?: boolean): void;
	private updateCardItems;
	private resizeCardView;
}
declare module "@serenity-is/sleekgrid" {
	interface Column<TItem = any> {
		summaryType?: import("@serenity-is/corelib").SummaryType;
	}
}
export interface CustomSummaryMixinOptions {
	grid: DataGrid<any, any>;
}
export declare class CustomSummaryMixin {
	constructor(options: CustomSummaryMixinOptions);
}
declare module "@serenity-is/sleekgrid" {
	interface Column<TItem = any> {
		grouping?: false | GroupInfo<any>;
	}
}
export interface DraggableGroupingOptions {
	deleteIconCssClass?: string;
	deleteIconImage?: string;
	dropPlaceHolderText?: string;
	getGroupingFor?: (column: Column) => GroupInfo<any>;
	getAllColumns?: () => Column[];
	getCount?: (group: Group<any>) => number;
	displayTotalsRow?: boolean;
	collapsed?: boolean;
}
export interface GroupChangeInfo {
	groupingArray: any[];
	userChange: boolean;
}
/**
 * Based on plugin at https://github.com/muthukumarse/Slickgrid
 */
export declare class DraggableGroupingPlugin {
	private grid;
	private gridUid;
	private dropbox;
	private dropboxPlaceholder;
	private expandAll;
	private collapseAll;
	private options;
	private columnsGroupBy;
	readonly onGroupChanged: EventEmitter<GroupChangeInfo, import("@serenity-is/sleekgrid").IEventData>;
	constructor(options?: DraggableGroupingOptions);
	init(grid: Grid): void;
	private getColumns;
	destroy(): void;
	private setupColumnDropbox;
	getGroupingFor(column: Column): GroupInfo<any>;
	private addGroupColumn;
	setDroppedGroups(idList: string[]): void;
	private removeIconClick;
	private updateInterface;
	private groupChanged;
	static setupColumnReorder(grid: Grid, $headers: JQuery, setupColumnResize: () => void, trigger: (ev: any, p: any) => void): void;
}
export interface GridPersistanceFlags {
	groupColumns?: boolean;
}
export interface PersistedGridSettings {
	groupColumns?: string[];
}
export interface DraggableGroupingMixinOptions {
	grid: DataGrid<any, any>;
	onGroupChanged?: (info: GroupChangeInfo) => void;
	getCount?: (group: Group<any>) => number;
	groupItemMetadataProvider?: GroupItemMetadataProvider;
	displayTotalsRow?: boolean;
	collapsed?: boolean;
}
export declare class DraggableGroupingMixin {
	readonly plugin: DraggableGroupingPlugin;
	constructor(options: DraggableGroupingMixinOptions);
}
/** Auto save types */
export declare enum AutoSaveOption {
	/** Never auto save */
	Never = 0,
	/** Automatically save pending changes without asking */
	Auto = 1,
	/** Ask for confirmation from user to save pending changes */
	Confirm = 2
}
export declare class EntityGridDialog<TItem, TOptions> extends EntityGrid<TItem, TOptions> {
	protected tabs: JQuery;
	protected validator: JQueryValidation.Validator;
	idPrefix: string;
	protected dialogPane: JQuery;
	protected entity: TItem;
	protected entityId: any;
	protected propertyGrid: PropertyGrid;
	protected isDialogOpen: boolean;
	protected saveAndCloseButton: JQuery;
	protected applyChangesButton: JQuery;
	protected deleteButton: JQuery;
	protected undeleteButton: JQuery;
	protected cloneButton: JQuery;
	protected localizationGrid: PropertyGrid;
	protected localizationButton: JQuery;
	protected localizationPendingValue: any;
	protected localizationLastValue: any;
	protected loadedState: string;
	protected triedAutoSaveForCurrentEntity: boolean;
	constructor(container: JQuery, opt?: TOptions);
	protected createSlickGrid(): import("@serenity-is/sleekgrid").Grid<any>;
	destroy(): void;
	protected getItemCssClass(item: TItem, index: number): string;
	getSaveState(): string;
	protected hasPendingChanges(): boolean;
	protected autoSaveOnSwitch(): AutoSaveOption;
	protected autoSaveOnClose(): AutoSaveOption;
	protected checkPendingChangesOnSwitch(entityOrId: any, proceed: () => void): void;
	protected editItem(entityOrId: any): void;
	protected createEntityDialog(itemType: string, callback?: (dlg: Widget<any>) => void): Widget<any>;
	protected layout(): void;
	protected byId(id: string): JQuery;
	protected getDefaultTemplateName(): string;
	protected getTemplateName(): string;
	protected getFallbackTemplate(): string;
	protected getTemplate(): string;
	protected getValidatorOptions(): JQueryValidation.ValidationOptions;
	protected initValidator(): void;
	protected resetValidation(): void;
	protected validateForm(): boolean;
	dialogOpen(): void;
	protected getEditHash(): string;
	protected onDialogOpen(): void;
	arrange(): void;
	protected onDialogClose(): void;
	protected getDialogTitle(): string;
	dialogClose(): void;
	get dialogTitle(): string;
	set dialogTitle(value: string);
	protected setupDialogTitle(): void;
	protected initTabs(): void;
	protected get_entity(): TItem;
	protected set_entity(entity: any): void;
	protected get_entityId(): any;
	protected set_entityId(value: any): void;
	protected getEntityNameFieldValue(): any;
	protected getEntityTitle(): string;
	protected updateTitle(): void;
	protected isCloneMode(): boolean;
	protected isEditMode(): boolean;
	protected isDeleted(): boolean;
	protected isNew(): boolean;
	protected isNewOrDeleted(): boolean;
	protected getDeleteOptions(callback: (response: DeleteResponse) => void): ServiceOptions<DeleteResponse>;
	protected deleteHandler(options: ServiceOptions<DeleteResponse>, callback: (response: DeleteResponse) => void): void;
	protected doDelete(callback: (response: DeleteResponse) => void): void;
	protected onDeleteSuccess(response: DeleteResponse): void;
	protected attrs<TAttr>(attrType: {
		new (...args: any[]): TAttr;
	}): TAttr[];
	protected getEntityType(): string;
	private formKey;
	protected getFormKey(): string;
	private entitySingular;
	protected getEntitySingular(): string;
	protected getNameProperty(): string;
	protected getIsDeletedProperty(): string;
	load(entityOrId: any, done: () => void, fail?: (ex: Exception) => void): void;
	loadNewAndOpenDialog(): void;
	loadEntityAndOpenDialog(entity: TItem, asPanel?: boolean): void;
	protected loadResponse(data: any): void;
	protected loadEntity(entity: TItem): void;
	protected beforeLoadEntity(entity: TItem): void;
	protected afterLoadEntity(): void;
	loadByIdAndOpenDialog(entityId: any): void;
	protected onLoadingData(data: RetrieveResponse<TItem>): void;
	protected getLoadByIdOptions(id: any, callback: (response: RetrieveResponse<TItem>) => void): ServiceOptions<RetrieveResponse<TItem>>;
	protected getLoadByIdRequest(id: any): RetrieveRequest;
	protected reloadById(): void;
	loadById(id: any, callback?: (response: RetrieveResponse<TItem>) => void, fail?: () => void): void;
	protected loadByIdHandler(options: ServiceOptions<RetrieveResponse<TItem>>, callback: (response: RetrieveResponse<TItem>) => void, fail: () => void): void;
	protected initLocalizationGrid(): void;
	protected initLocalizationGridCommon(pgOptions: PropertyGridOptions): void;
	protected isLocalizationMode(): boolean;
	protected isLocalizationModeAndChanged(): boolean;
	protected localizationButtonClick(): void;
	protected getLanguages(): any[];
	protected loadLocalization(): void;
	protected setLocalizationGridCurrentValues(): void;
	protected getLocalizationGridValue(): any;
	protected getPendingLocalizations(): any;
	protected initPropertyGrid(): void;
	protected getFormPropertyItems(): import("@serenity-is/corelib").PropertyItem[];
	protected getPropertyGridOptions(): PropertyGridOptions;
	protected validateBeforeSave(): boolean;
	protected getSaveOptions(callback: (response: SaveResponse) => void): ServiceOptions<SaveResponse>;
	protected getSaveEntity(): TItem;
	protected getSaveRequest(): SaveRequest<TItem>;
	protected onSaveSuccess(response: SaveResponse): void;
	protected save_submitHandler(callback: (response: SaveResponse) => void): void;
	protected save(callback?: (response: SaveResponse) => void): void | boolean;
	protected saveHandler(options: ServiceOptions<SaveResponse>, callback: (response: SaveResponse) => void): void;
	protected createToolbar(buttons: ToolButton[]): void;
	protected showSaveSuccessMessage(response: SaveResponse): void;
	protected getButtons(): ToolButton[];
	protected getCloningEntity(): TItem;
	updateInterface(): void;
	protected getUndeleteOptions(callback?: (response: UndeleteResponse) => void): ServiceOptions<UndeleteResponse>;
	protected undeleteHandler(options: ServiceOptions<UndeleteResponse>, callback: (response: UndeleteResponse) => void): void;
	protected undelete(callback?: (response: UndeleteResponse) => void): void;
	protected getInsertPermission(): string;
	protected getUpdatePermission(): string;
	protected getDeletePermission(): string;
	protected hasDeletePermission(): any;
	protected hasInsertPermission(): any;
	protected hasUpdatePermission(): any;
	protected hasSavePermission(): boolean;
	protected editClicked: boolean;
	protected isViewMode(): any;
	protected useViewMode(): any;
}
/**
 * A mixin that can be applied to a DataGrid for favorite views functionality
 */
export declare class FavoriteViewsMixin<TItem> {
	private options;
	private dataGrid;
	private ul;
	constructor(options: FavoriteViewsMixinOptions<TItem>);
	private populateFavorites;
	private saveFavorites;
	private getFavorites;
}
export interface FavoriteViewsMixinOptions<TItem> {
	grid: DataGrid<TItem, any>;
}
export interface HeadersFiltersMixinOptions {
	grid: DataGrid<any, any>;
	filterByText?: boolean;
}
/**
 * A mixin that can be applied to a DataGrid for column filters functionality
 */
export declare class HeaderFiltersMixin {
	private filterByText;
	constructor(options: HeadersFiltersMixinOptions);
}
export declare enum HeaderFilterType {
	disabled = 0,
	value = 1,
	text = 2
}
declare module "@serenity-is/sleekgrid" {
	interface Column<TItem = any> {
		headerFilterType?: HeaderFilterType;
		headerFilterValues?: object[];
	}
}
export interface HeaderFiltersOptions {
	buttonImage?: string;
	buttonClass?: string;
	useColumnFormatter?: boolean;
	getFilterValues?: (column: Column, callback: (values: object[], texts?: string[]) => void) => void;
	getFilterType?: (column: Column) => HeaderFilterType;
}
export declare class HeaderFiltersPlugin {
	private grid;
	private menu;
	private searchInput;
	private handler;
	private options;
	private checkedValues;
	private filterValues;
	private filterTexts;
	onFilterApplied: EventEmitter<any, import("@serenity-is/sleekgrid").IEventData>;
	onCommand: EventEmitter<any, import("@serenity-is/sleekgrid").IEventData>;
	constructor(options: HeaderFiltersOptions);
	init(g: Grid): void;
	destroy(): void;
	getFilterType(column: Column): HeaderFilterType;
	private handleBodyMouseDown;
	private hideMenu;
	private handleHeaderCellRendered;
	private handleBeforeHeaderCellDestroy;
	private addMenuItem;
	private addSearchInput;
	private updateFilterItems;
	private getFilterText;
	private showFilter;
	private columnsResized;
	private onCheckboxClick;
	private setButtonIsFiltered;
	private handleApply;
	private containsFilter;
	getFilterValue(item: any, column: Column): any;
	private sortFilterValues;
	private updateFilterValues;
	private updateFilterValuesFromData;
	private handleMenuItemClick;
}
export interface IdleTimeoutOptions {
	/** which events to consider as an activity. */
	activityEvents?: string;
	/** signout user if no activity within this duration (seconds). default is 900 (15 mins). */
	activityTimeout?: number;
	/** optional callback that is called just before signing out */
	beforeSignout?: () => void;
	/** interval for checking timer, default is 5 seconds */
	checkInterval?: number;
	/** interval for calling keep alive url in seconds, default is 300 (5 mins) */
	keepAliveTimer?: number;
	/** keep alive url */
	keepAliveUrl?: string;
	/** url used to signout user */
	signoutUrl?: string;
	/** show warning for this number of seconds */
	warningDuration?: number;
}
export declare class IdleTimeout {
	private options;
	private idleTimer;
	private keepAliveTimer;
	private warningTimer;
	private remainingTimer;
	constructor(options: IdleTimeoutOptions);
	protected startKeepAliveTimer(): void;
	protected isWarningActive(): boolean;
	protected startWarningTimer(): void;
	protected stopWarningTimer(): void;
	protected warningTimeout(): void;
	protected resetIdleTimer(): void;
	protected idleTimeout(): void;
	protected checkActivityTimeout(): void;
	protected signout(): void;
	protected showWarning(): void;
	protected closeWarning(): void;
	protected getRemainingSeconds(): number;
	protected countdownDisplay(): void;
	static defaults: IdleTimeoutOptions;
}
export declare function setupUIOverrides(): void;
export declare class TranslationGrid extends EntityGrid<TranslationItem, any> {
	protected getIdProperty(): string;
	protected getLocalTextDbPrefix(): string;
	protected getService(): string;
	private hasChanges;
	private searchText;
	private sourceLanguage;
	private targetLanguage;
	private targetLanguageKey;
	constructor(container: JQuery);
	protected onClick(e: JQueryEventObject, row: number, cell: number): any;
	protected getColumns(): Column[];
	protected createToolbarExtensions(): void;
	protected getQuickFilters(): import("@serenity-is/corelib").QuickFilter<Widget<any>, any>[];
	private keysByAssembly;
	protected onViewProcessData(response: TranslationListResponse): TranslationListResponse;
	protected saveChanges(language: string): PromiseLike<any>;
	protected onViewSubmit(): boolean;
	protected getButtons(): ToolButton[];
	protected createQuickSearchInput(): void;
	protected onViewFilter(item: TranslationItem): boolean;
	protected usePager(): boolean;
}
/**
 * A dialog/panel base class that easily generates a wizard UI from tabs in a form definition (e.g. Form.cs)
 */
export declare abstract class WizardDialog<TEntity, TOptions> extends TemplatedDialog<TOptions> {
	private wizardGrid;
	/**
	 * Creates a new wizard dialog
	 * @param opt options, might be used by derived classes
	 */
	constructor(opt?: TOptions);
	/**
	 * gets property grid options
	 */
	protected getPropertyGridOptions(): PropertyGridOptions;
	/**
	 * gets form key to use to load property items / tabs
	 */
	protected getFormKey(): string;
	/**
	 * gets list of property items to shown on form, uses form key to load items by default
	 */
	protected getPropertyItems(): PropertyItem[];
	/**
	 * gets initial entity to load onto form, override these to customize initial form values
	 */
	protected getInitialEntity(): TEntity;
	protected get maxSteps(): number;
	/**
	 * moves to a step, by calling one of next, back or finish methods based on target step
	 * @param toStep the target step to move to
	 */
	protected moveToStep(toStep: number): void;
	private _step;
	protected get step(): number;
	protected set step(value: number);
	/**
	 * called to reset the form, and go back to first step
	 */
	protected reset(): void;
	/**
	 * is called when user clicks the Finish button (next button on last step)
	 */
	protected finish(): void;
	/**
	 * next method is called when user tries to go forward
	 * @param toStep the step user is trying to move to, usually one step ahead
	 */
	protected next(toStep: number): void;
	/**
	 * back method is called when user tries to go backward
	 * @param toStep the step user is trying to move to, usually one step back but can also be multiple
	 */
	protected back(toStep: number): void;
	private getStepLink;
	private getStepPanel;
	/**
	 * make sure derived classes use WizardDialog template,
	 * if they don't define one of their own
	 */
	protected getFallbackTemplate(): string;
	/**
	 * gets cancel confirmation message, return null to disable confirmation
	 */
	protected getCancelMessage(): string;
	/**
	 * confirms when user tries to cancel or close the wizard
	 * @param e
	 */
	protected confirmCancel(e: JQueryEventObject): void;
	/** gets save entity from form, optionally from a limited list of steps (tabs)
	 * @param steps the list of steps to read data from, pass null to get all
	 */
	protected getSaveEntity(steps?: number[]): TEntity;
	protected get compactSteps(): boolean;
	protected set compactSteps(value: boolean);
}
export interface ElevateRequest extends ServiceRequest {
	Password?: string;
}
export declare class ElevationPanel extends PropertyPanel<ElevateRequest, any> {
	protected getFormKey(): string;
	protected getReturnUrl(): any;
	protected redirectToReturnUrl(): void;
	submitClick(): void;
	renderContents(): void;
}

export {};
